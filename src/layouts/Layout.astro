---
interface Props {
  title: string
}

const { title } = Astro.props

declare global {
  interface Window {
    navigation: any;
  }

  interface Document {
    startViewTransition: any;
  }
}

---

<!doctype html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
    <meta name='view-transition' content='same-origin' />
  </head>
  <body>
    <div id='content'>
      <slot />
    </div>
  </body>
</html>
<style is:global>
  body {
    font-family: 'Onest Variable', sans-serif;
  }
</style>

<script>
  if (document.startViewTransition) {
    window.navigation.addEventListener('navigate', (event: any) => {
      const toURL = new URL(event.destination.url)

      //* Only allow navigation to the same origin
      if (location.origin !== toURL.origin) return

      //* Intercept the navigation
      event.intercept({
        async handler() {
          // Fetch the new page
          const response = await fetch(toURL.pathname)
          const text = await response.text()

          // Use DOMParser to parse the HTML string
          const parser = new DOMParser()
          const doc = parser.parseFromString(text, 'text/html')

          // Extract the body content
          const data = doc.body.innerHTML

          document.startViewTransition(() => {
            // Update the content
            document.body.innerHTML = data
            document.documentElement.scrollTop = 0
          })
        },
      })
    })
  }
</script>
